name: meta_deploy

on: 
  pull_request:
    branches: [main]
    # TODO: pr workflow that is referred in branch checks required must no contain path filters. 
    # paths:
    #   - environments/**/deploy-config.json
  # TODO: if decided to implement, figure out how to work with commits
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  # Create 3 matrices for each environment
  # units = [], how to add each value with metadata? version, changed 
  units:
    runs-on: ubuntu-latest
    outputs:
      units: ${{ steps.output.outputs.units }}
      units_conf: ${{ steps.output.outputs.units_conf }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      # Implement something like dorny/paths-filter@v2.11.1

      - uses: dcarbone/install-jq-action@v2.1.0
        with:
          version: '1.7'
          force: true

      # TODO: What is environment variable length limit?
      # TODO: environment is mentioned in two places - risk of updating
      # TODO: assumed that unit is changed only in single environment. Is that the case?
      - name: Get deployment configuration
        run: |
          base_ref="origin/$GITHUB_BASE_REF"
          head_ref="origin/$GITHUB_HEAD_REF"
          changed_files=$(git show --pretty="" --name-only $base_ref..$head_ref | sort --unique)
          echo "Changed files:"
          echo -e "$changed_files" | sed 's/^/\t/'

          echo 'Create configuration using the schema: {"<unit>": <deploy-config> * {"environment": "", "deployed_release_version": ""}}'
          echo '{}' | tee meta-config.json
          for config_file in $(echo "$changed_files" | grep 'deploy-config.json'); do
            unit=$(echo "$config_file" | sed -n 's/environments\/\(.*\)\/\(.*\)\/.*/\2/p')

            echo "Add whole unit deploy config"
            deploy_config=$(jq --raw-output --compact-output '.' $config_file)
            jq --arg deploy_config "$deploy_config" --arg unit "$unit" '. |= . * {$unit: $deploy_config | fromjson}' meta-config.json | tee tmp.json && mv tmp.json meta-config.json

            echo "Add meta parameters"
            environment=$(echo "$config_file" | sed -n 's/environments\/\(.*\)\/\(.*\)\/.*/\1/p')
            # next_environment=$(jq --raw-output '.next_environment' $(dirname $config_file)/promote-config.json)
            echo "Get previous deployed version only if it is not the first commit in repository and config file exist in previous commit"
            if [[ "$(git ls-tree -r $base_ref --name-only)" =~ (^|$'\n')"$config_file"($'\n'|$) ]]; then
              deployed_release_version=$(git show $base_ref:$config_file | jq --raw-output '.version')
            fi
            jq --arg environment "$environment" --arg unit "$unit" --arg deployed_release_version "$deployed_release_version" \
              '. |= . * {$unit: {"environment": $environment, "deployed_release_version": $deployed_release_version}}' meta-config.json \
              | tee tmp.json && mv tmp.json meta-config.json
          done
      
      - name: Set output
        id: output
        run: |
          units_conf=$(jq --compact-output '.' meta-config.json)
          echo "units_conf=$units_conf" | tee -a "$GITHUB_OUTPUT"
          units=$(jq --compact-output 'keys' meta-config.json)
          echo "units=$units" | tee -a "$GITHUB_OUTPUT"

  deploys:
    needs: [units]
    if: ${{ needs.units.outputs.units != '[]' }} 
    secrets: inherit
    uses: oleksandrkudin/poc-ndp-environments/.github/workflows/deploys.yaml@main
    with:
      units_conf: ${{ needs.units.outputs.units_conf }}
  
  # This job is used as check in PRs
  status:
    if: ${{ always() }}
    needs: [deploys]
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "deploy status = ${{ needs.deploys.result }}"
          if [[ ! "success, skipped" =~ "${{ needs.deploys.result }}" ]]; then
            exit 1
          fi


  #####################
  # Dashboard
  #####################

  dashboard:
    if: ${{ always() && needs.units.outputs.units != '[]' }}
    needs: [units, deploys]
    secrets: inherit
    strategy:
      matrix:
        unit: ${{ fromJson(needs.units.outputs.units) }}
    uses: oleksandrkudin/poc-ndp-workflows/.github/workflows/job_badge.yaml@main
    with:
      job_result: '${{ fromJson(needs.deploys.outputs.units_result)[matrix.unit] }}'
      badge_directory: '.github/badges/deployments'
      pr_auto_prefix: 'auto-deploy-badge'
      badge_label: '${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].deployed_release_version }} -> ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].version }}'
      unit: ${{ matrix.unit }}
      environment: ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].environment }}
