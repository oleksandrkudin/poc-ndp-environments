name: meta_deploy

on: 
  push:
    branches: [main]
    paths:
      - environments/**/deploy-config.json
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  # Create 3 matrices for each environment
  # units = [], how to add each value with metadata? version, changed 
  units:
    runs-on: ubuntu-latest
    outputs:
      dev_units: ${{ steps.output.outputs.dev_units }}
      test_units: ${{ steps.output.outputs.test_units }}
      prod_units: ${{ steps.output.outputs.prod_units }}
      dev_units_config: ${{ steps.output.outputs.dev_units_config }}
      test_units_config: ${{ steps.output.outputs.test_units_config }}
      prod_units_config: ${{ steps.output.outputs.prod_units_config }}
      units: ${{ steps.output.outputs.units }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0  # TODO: otherwise git show --pretty="" --name-only HEAD show all files

      # Implement something like dorny/paths-filter@v2.11.1

      - uses: dcarbone/install-jq-action@v2.1.0
        with:
          version: '1.7'
          force: true

      # TODO: What is environment variable length limit?
      # TODO: environment is mentioned in two places - risk of updating
      - name: Get environments configuration
        run: |
          changed_files=$(git show --pretty="" --name-only HEAD)
          echo "Changed files:"
          echo -e "$changed_files" | sed 's/^/\t/'

          echo 'Create configuration using the schema: {"<unit>": {"version": "", "environment": "", "next_environment": ""}}'
          echo '{}' | tee meta-config.json
          for config_file in $(echo "$changed_files" | grep 'deploy-config.json'); do
            version=$(jq --raw-output '.version' $config_file)
            unit=$(echo "$config_file" | sed -n 's/environments\/\(.*\)\/\(.*\)\/.*/\2/p')
            environment=$(echo "$config_file" | sed -n 's/environments\/\(.*\)\/\(.*\)\/.*/\1/p')
            next_environment=$(jq --raw-output '.next_environment' $(dirname $config_file)/promote-config.json)
            # TODO: first commit does not have previous commit and file could not exist
            deployed_release_version=$(git show HEAD^:$config_file | jq '.version')
            jq --arg environment "$environment" --arg unit "$unit" --arg version "$version" --arg next_environment "$next_environment" --arg deployed_release_version "$deployed_release_version" \
              '. |= . * {$unit: {"environment": $environment, "version": $version, "next_environment": $next_environment, "deployed_release_version": $deployed_release_version}}' meta-config.json \
              | tee -a tmp.json && mv tmp.json meta-config.json
          done
      
      - name: Set output
        id: output
        run: |
          units=$(jq --compact-output '.' meta-config.json)
          echo "units=$units" | tee -a "$GITHUB_OUTPUT"
  
  poc-ndp-helm-chart1:
    needs: [units]
    if: ${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'] != '' }}
    name: "${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'].environment }} : poc-ndp-helm-chart1 : ${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'].deployed_release_version }} ->  ${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'].release_version }}"
    secrets: inherit
    # TODO: with reusable workflow it is not allowed to define it here
    #environment: ${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'].environment }}
    concurrency:
      group: ${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'].environment }}
    uses: oleksandrkudin/poc-ndp-helm-chart1/.github/workflows/deploy.yaml@main
    with:
      environment: ${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'].environment }}
      release_version:  ${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'].release_version }}
      next_environment: ${{ fromJson(needs.units.outputs.units)['poc-ndp-helm-chart1'].next_environment }}
