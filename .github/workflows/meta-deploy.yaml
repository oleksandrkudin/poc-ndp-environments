name: meta_deploy

on: 
  push:
    branches: [main]
    paths:
      - environments/**/deploy-config.json
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  # Create 3 matrices for each environment
  # units = [], how to add each value with metadata? version, changed 
  units:
    runs-on: ubuntu-latest
    outputs:
      units: ${{ steps.output.outputs.units }}
      units_conf: ${{ steps.output.outputs.units_conf }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0  # TODO: otherwise git show --pretty="" --name-only HEAD show all files

      # Implement something like dorny/paths-filter@v2.11.1

      - uses: dcarbone/install-jq-action@v2.1.0
        with:
          version: '1.7'
          force: true

      # TODO: What is environment variable length limit?
      # TODO: environment is mentioned in two places - risk of updating
      - name: Get environments configuration
        run: |
          changed_files=$(git show --pretty="" --name-only HEAD)
          echo "Changed files:"
          echo -e "$changed_files" | sed 's/^/\t/'

          echo 'Create configuration using the schema: {"<unit>": {"version": "", "environment": "", "next_environment": "", "deployed_release_version": ""}}'
          echo '{}' | tee meta-config.json
          for config_file in $(echo "$changed_files" | grep 'deploy-config.json'); do
            version=$(jq --raw-output '.version' $config_file)
            unit=$(echo "$config_file" | sed -n 's/environments\/\(.*\)\/\(.*\)\/.*/\2/p')
            environment=$(echo "$config_file" | sed -n 's/environments\/\(.*\)\/\(.*\)\/.*/\1/p')
            next_environment=$(jq --raw-output '.next_environment' $(dirname $config_file)/promote-config.json)
            # TODO: first commit does not have previous commit and file could not exist
            deployed_release_version=$(git show HEAD^:$config_file | jq --raw-output '.version')
            jq --arg environment "$environment" --arg unit "$unit" --arg version "$version" --arg next_environment "$next_environment" --arg deployed_release_version "$deployed_release_version" \
              '. |= . * {$unit: {"environment": $environment, "version": $version, "next_environment": $next_environment, "deployed_release_version": $deployed_release_version}}' meta-config.json \
              | tee -a tmp.json && mv tmp.json meta-config.json
          done
      
      - name: Set output
        id: output
        run: |
          units_conf=$(jq --compact-output '.' meta-config.json)
          echo "units_conf=$units_conf" | tee -a "$GITHUB_OUTPUT"
          units=$(jq --compact-output 'keys' meta-config.json)
          echo "units=$units" | tee -a "$GITHUB_OUTPUT"

  #####################
  # Units
  #####################

  # Deployment unit
  poc-ndp-helm-chart1:
    needs: [units]
    if: ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-helm-chart1'] != '' }}
    name: "${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-helm-chart1'].environment }} : poc-ndp-helm-chart1 : ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-helm-chart1'].deployed_release_version }} ->  ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-helm-chart1'].version }}"
    secrets: inherit
    concurrency:
      group: ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-helm-chart1'].environment }}
    uses: oleksandrkudin/poc-ndp-helm-chart1/.github/workflows/deploy.yaml@main
    with:
      environment: ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-helm-chart1'].environment }}
      release_version:  ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-helm-chart1'].version }}
      next_environment: ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-helm-chart1'].next_environment }}

  # Tracking unit
  poc-ndp-app1:
    needs: [units, poc-ndp-helm-chart1]
    if: ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-app1'] != '' }}
    name: "${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-app1'].environment }} : poc-ndp-app1 : ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-app1'].deployed_release_version }} ->  ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-app1'].version }}"
    secrets: inherit
    concurrency:
      group: ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-app1'].environment }}
    uses: oleksandrkudin/poc-ndp-app1/.github/workflows/deploy.yaml@main
    with:
      environment: ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-app1'].environment }}
      release_version:  ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-app1'].version }}
      next_environment: ${{ fromJson(needs.units.outputs.units_conf)['poc-ndp-app1'].next_environment }}

  #####################
  # Dashboard
  #####################

  dashboard:
    if: ${{ always() }}
    needs: [units, poc-ndp-helm-chart1, poc-ndp-app1]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unit: ${{ fromJson(needs.units.outputs.units) }}
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Get deploy jobs status
        run: |
          deploy_job_status='${{ needs[matrix.unit].result }}'
          if [ "$deploy_job_status" == "" ]; then
            deploy_job_status="unknow"
          fi
          echo "deploy_job_status=$deploy_job_status" | tee -a "$GITHUB_ENV"

          if [ "$deploy_job_status" == "success" ]; then
            badge_color="green"
          elif [ "$deploy_job_status" == "failure" ]; then
            badge_color="red"
          else
            badge_color="grey"
          fi
          echo "badge_color=$badge_color" | tee -a "$GITHUB_ENV"
      
      - name: Create badges directory
        run: |
          if [ ! -d .github/badges ]; then
            mkdir -p .github/badges
          fi

      # TODO: recommendation dedicated branch with special settings as repository can grow very large 
      - name: Generate the status badge SVG image
        uses: emibcn/badge-action@v2.0.2
        id: badge
        with:
          label: '${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].deployed_release_version }} -> ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].version }}'
          status: '${{ env.deploy_job_status }}'
          color: ${{ env.badge_color }}
          path: .github/badges/${{ matrix.unit }}-${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].environment }}.svg
      
      # TODO: Reusable pattern = make (commit) changes to repository
      - name: "Create PR"
        id: pull_request
        uses: peter-evans/create-pull-request@v5
        with:
          title: '[auto-badge] ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].environment }} :: ${{ matrix.unit }} ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].deployed_release_version }} -> ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].version }} ${{ env.deploy_job_status }}'
          commit-message: '[auto-badge] ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].environment }} :: ${{ matrix.unit }} ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].deployed_release_version }} -> ${{ fromJson(needs.units.outputs.units_conf)[matrix.unit].version }} ${{ env.deploy_job_status }}'
          branch: ${{ github.repository }}/${{ github.run_id }}/${{ github.run_attempt }}/${{ github.job }}/${{ matrix.unit }}
          base: main
          add-paths: '.github/badges/**'
          # reviewers: '[]'
          delete-branch: true
          labels: 'automerge'
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: "Merge PR"
        if: ${{ steps.pull_request.outputs.pull-request-number != '' }}
        uses: juliangruber/merge-pull-request-action@v1
        with:
          github-token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          number:  ${{ steps.pull_request.outputs.pull-request-number }}
          method: squash
          repo: oleksandrkudin/poc-ndp-environments
      
      - name: "Delete branch after merge"
        if: ${{ steps.pull_request.outputs.pull-request-number != '' }}
        run: |
          git push origin --delete ${{ github.repository }}/${{ github.run_id }}/${{ github.run_attempt }}/${{ github.job }}/${{ matrix.unit }}
